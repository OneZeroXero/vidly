{"ast":null,"code":"var _jsxFileName = \"/Users/philwilliams/vidly/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies, deleteMovie } from \"../services/fakeMovieService\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport MoviesTable from \"./moviesTable\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      genres: [],\n      currentPage: 1,\n      pageSize: 4\n    };\n\n    this.handleDelete = movie => {\n      const movies = this.state.movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = page => {\n      this.setState({\n        currentPage: page\n      });\n    };\n\n    this.handleGenreSelect = genre => {\n      this.setState({\n        selectedGenre: genre,\n        currentPage: 1\n      });\n    };\n  }\n\n  componentDidMount() {\n    const genres = [{\n      name: \"All Genres\"\n    }, ...getGenres()];\n    this.setState({\n      movies: getMovies(),\n      genres\n    });\n  }\n\n  renderMovies() {\n    const {\n      length: count\n    } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      selectedGenre,\n      movies: allMovies\n    } = this.state;\n    if (count === 0) return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }\n    }, \"There are no Movies in the database\");\n    const filtered = selectedGenre && selectedGenre._id ? allMovies.filter(m => m.genre._id == selectedGenre._id) : allMovies;\n    const movies = paginate(filtered, currentPage, pageSize);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      items: this.state.genres,\n      selectedItem: this.state.selectedGenre,\n      onItemSelect: this.handleGenreSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"Showing \", filtered.length, \" movies in the database.\"), /*#__PURE__*/React.createElement(MoviesTable, {\n      movies: movies,\n      onLike: this.handleLike,\n      onDelete: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      itemsCount: filtered.length,\n      pageSize: pageSize,\n      currentPage: currentPage,\n      onPageChange: this.handlePageChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  render() {\n    return this.renderMovies();\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/philwilliams/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","deleteMovie","Pagination","paginate","ListGroup","getGenres","MoviesTable","Movies","state","movies","genres","currentPage","pageSize","handleDelete","movie","filter","m","_id","setState","handleLike","index","indexOf","liked","handlePageChange","page","handleGenreSelect","genre","selectedGenre","componentDidMount","name","renderMovies","length","count","allMovies","filtered","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getMovies, deleteMovie } from \"../services/fakeMovieService\";\nimport Pagination from \"./common/pagination\";\nimport { paginate } from \"../utils/paginate\";\nimport ListGroup from \"./common/listGroup\";\nimport { getGenres } from \"../services/fakeGenreService\";\nimport MoviesTable from \"./moviesTable\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    genres: [],\n    currentPage: 1,\n    pageSize: 4,\n  };\n\n  componentDidMount() {\n    const genres = [{ name: \"All Genres\" }, ...getGenres()];\n    this.setState({ movies: getMovies(), genres });\n  }\n\n  handleDelete = (movie) => {\n    const movies = this.state.movies.filter((m) => m._id !== movie._id);\n    this.setState({ movies });\n  };\n\n  handleLike = (movie) => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  handleGenreSelect = (genre) => {\n    this.setState({ selectedGenre: genre, currentPage: 1 });\n  };\n\n  renderMovies() {\n    const { length: count } = this.state.movies;\n    const {\n      pageSize,\n      currentPage,\n      selectedGenre,\n      movies: allMovies,\n    } = this.state;\n\n    if (count === 0) return <h1>There are no Movies in the database</h1>;\n\n    const filtered =\n      selectedGenre && selectedGenre._id\n        ? allMovies.filter((m) => m.genre._id == selectedGenre._id)\n        : allMovies;\n\n    const movies = paginate(filtered, currentPage, pageSize);\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <ListGroup\n            items={this.state.genres}\n            selectedItem={this.state.selectedGenre}\n            onItemSelect={this.handleGenreSelect}\n          />\n        </div>\n        <div className=\"col\">\n          <h1>Showing {filtered.length} movies in the database.</h1>\n          <MoviesTable\n            movies={movies}\n            onLike={this.handleLike}\n            onDelete={this.handleDelete}\n          />\n          <Pagination\n            itemsCount={filtered.length}\n            pageSize={pageSize}\n            currentPage={currentPage}\n            onPageChange={this.handlePageChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return this.renderMovies();\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}